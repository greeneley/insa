####################################################
# Thanh Luu
# 4A STI - TD3 MUL
# SIMULATION A EVENEMENTS DISCRETS
# PROJET "SALLE D'URGENCE"
####################################################


import ciw


class Projet(object):
	"""docstring for ClassName"""

	def __init__(self):
		self.classes = [0.02, 0.05, 0.18, 0.54, 0.20]
		self.N = ciw.create_network(
			Arrival_distributions={
				'Class 0':[['Exponential', 0.02*1/10],
						   ['Exponential', 0.02*1/12],
						   ['Exponential', 0.02*1/20],
				           ['Exponential', 0.02*1/25],
						   'NoArrivals',
						   'NoArrivals',
						   'NoArrivals',
						   'NoArrivals',
						   'NoArrivals',
						   'NoArrivals',
						   'NoArrivals'
				],
				'Class 1':[['Exponential', 0.05*1/10],
						   ['Exponential', 0.05*1/12],
						   ['Exponential', 0.05*1/20],
				           ['Exponential', 0.05*1/25],
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals'],
				'Class 2':[['Exponential', 0.18*1/10],
						   ['Exponential', 0.18*1/12],
						   ['Exponential', 0.18*1/20],
				           ['Exponential', 0.18*1/25],
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals'],
				'Class 3':[['Exponential', 0.54*1/10],
						   ['Exponential', 0.54*1/12],
						   ['Exponential', 0.54*1/20],
				           ['Exponential', 0.54*1/25],
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals'],
				'Class 4':[['Exponential', 0.20*1/10],
						   ['Exponential', 0.20*1/12],
						   ['Exponential', 0.20*1/20],
				           ['Exponential', 0.20*1/25],
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals','NoArrivals','NoArrivals',
						   'NoArrivals']
			},
			Service_distributions={
				'Class 0':[['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Deterministic', 0.0],
						   ['Deterministic', 0.0],
						   ['Deterministic', 0.0],
						   ['Deterministic', 0.0],
						   ['Deterministic', 0.0],
						   ['Deterministic', 0.0],
						   ['Deterministic', 0.0]
				],
				'Class 1':[['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Triangular', 3, 7, 5],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 10, 18, 15],
						   ['Deterministic', 0.0]
				],
				'Class 2':[['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Triangular', 3, 7, 5],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 10, 15, 12],
						   ['Deterministic', 0.0]
				],
				'Class 3':[['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Triangular', 3, 7, 5],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 8, 12, 10],
						   ['Deterministic', 0.0]
				],
				'Class 4':[['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Exponential', 6.0],
						   ['Triangular', 3, 7, 5],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 30, 60, 45],
						   ['Uniform', 8, 15],
						   ['Triangular', 6, 9, 7.5],
						   ['Deterministic', 0.0]
				]
			},
			Priority_classes={
				'Class 0':0,
				'Class 1':1,
				'Class 2':2,
				'Class 3':3,
				'Class 4':4
			},
			Transition_matrices={
				'Class 0': [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],

				'Class 1': [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23, 0.0, 0.0, 0.0, 0.77],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],

				'Class 2': [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23, 0.0, 0.0, 0.0, 0.77],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],

				'Class 3': [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23, 0.0, 0.0, 0.0, 0.77],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],

				'Class 4': [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23, 0.0, 0.0, 0.0, 0.77],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
							[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
			},
			Number_of_servers=[
				[[0, 480], [1, 1200], [0, 1440],
				 [0, 1920], [1, 2640], [0, 2880],
				 [0, 3360], [1, 4080], [0, 4320],
				 [0, 4800], [1, 5520], [0, 5760],
				 [0, 6240], [1, 6960], [0, 7200],
				 [0, 10080]],
				[[1, 480], [0, 1200], [1, 1440],
				 [1, 1920], [0, 2640], [1, 2880],
				 [1, 3360], [0, 4080], [1, 4320],
				 [1, 4800], [0, 5520], [1, 5760],
				 [1, 6240], [0, 6960], [1, 7200],
				 [0, 10080]],
				[[0, 7200],
			 	 [0, 7680], [1, 8400], [0, 8640],
			 	 [0, 9120], [1, 9840], [0, 10080]],
				[[0, 7200],
			 	 [1, 7680], [0, 8400], [1, 8640],
			 	 [1, 9120], [0, 9840], [1, 10080]],
				1,
				[[4, 480], [6, 960], [4,1440]],
				[[4, 480], [6, 960], [4,1440]],
				[[4, 480], [6, 960], [4,1440]],
				[[4, 480], [6, 960], [4,1440]],
				[[4, 480], [6, 960], [4,1440]],
				1
			]
		)
	#END_DEF

	def compute(self):
		self.Q = ciw.Simulation(self.N)
		self.Q.simulate_until_max_time(10080)
		recs = self.Q.get_all_records()
		for record in recs:
			print(record)
	#END_DEF

#END_CLASS

if __name__ == '__main__':
	test = Projet()
	test.compute()
#END_IF